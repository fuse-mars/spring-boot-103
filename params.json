{"name":"Spring-boot-103","tagline":"CQRS pattern inside Spring","body":"### Overview\r\nTwo applications that fulfill the Command Query Responsibilities Segregation (CQRS) pattern implementation.\r\n\r\n### CQRS in simple terms\r\n  CQRS stands for Command Query Responsibility Segregation. It is a design pattern that enforces the separation of actions that modify the state of an application and the actions that leave the state of the application intact.\r\n* Qoute from the [inventor's paper](https://cqrs.files.wordpress.com/2010/11/cqrs_documents.pdf): \"objects are split into two objects, one containing the Commands one containing the Queries.\"\r\n* [Idea behind the design](https://en.wikipedia.org/wiki/Command%E2%80%93query_separation) : Asking a question should not change the answer.\r\n\r\nTwo important terms here are:\r\n* Command: code execution that modifies(mutate) the application's state, In java this would represent all \"setter\" methods.\r\n* Query: code execution that **does not** modifies(mutate) the application's state, In java this would represent all \"getter\" methods.\r\n\r\n### Spring application - original architechture \r\nThis is implemented in the [Spring Boot 102](http://fuse-mars.github.io/spring-boot-102)\r\n\r\n### Spring application - cqrs based architechture\r\nWe are going to split into two, the [project](https://github.com/fuse-mars/spring-boot-102) that we built in [spring-boot-102 tutorial](). One that processes commands and another that processes queries. Below is the schematic representation of what this separation looks like.\r\n\r\n![Architecture schema](https://raw.githubusercontent.com/fuse-mars/spring-boot-103/master/tutorial-resource/architecture-schema.png)\r\n\r\nIn the original architecture\r\n* Step 1: user sends a POST request to save data\r\n* Step 2: application responds with the **save data or data related errors**\r\n* Step 3: user sends a GET request to read the saved data\r\n* Step 4: application responds with the save data or request related errors \r\n\r\nIn the CQRS based architecture\r\n* Step 1: user sends a POST request to save data\r\n* Step 2: application responds with an **ACK/NACK message** saying that the POST request has been received or has been rejected.\r\n* Step 3: user sends a GET request to read the saved data.\r\n* Step 4: application responds with the save data or request related errors.\r\n\r\n### Technology\r\n* [Gradle](https://gradle.org/)\r\n* [Spring Boot](http://projects.spring.io/spring-boot/)\r\n* [Spring Data](http://projects.spring.io/spring-data/)\r\n\r\n### Step followed\r\n* Add a mysql database:  We can't use the in-memory database anymore because both applications have to access the same datastore.\r\n  * Make sure you have a mysql database management server running locally, I use [MAMP](https://www.mamp.info/en/) \r\n  * add dependency \r\n```\r\n# build.gradle\r\n# compile 'com.h2database:h2' removed\r\ncompile 'mysql:mysql-connector-java' # added\r\n```\r\n  * add configuration values\r\n```\r\ntouch application.properties\r\n```\r\n```\r\n# content of the application.properties\r\n\r\nspring.datasource.url=jdbc:mysql://localhost/springboot103\r\nspring.datasource.username=spring\r\nspring.datasource.password=spring\r\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\r\n\r\nspring.jpa.show-sql = true\r\nspring.jpa.hibernate.ddl-auto = update\r\nspring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy\r\nspring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect\r\n\r\n\r\n```\r\n  * Create a database called `springboot103`\r\n  * Create a user/password `spring/spring` with read write access to the just created databse\r\n\r\n* Create command handler application: \r\n  * This app is almost the same as the old application except, we disabled the all request methods except POST and DELETE,  The getters method have also been removed, and the response returned to the user is now an acknowledgment instead of the saved object.\r\n\r\n```\r\nTODO add code snippets\r\n```\r\n\r\n* Create Query handler application: \r\n  * We have removed the setters from the object model. \r\n\r\n```\r\nTODO add code snippets\r\n```\r\n\r\n### Other main usage of CQRS\r\n* Event Sourcing: TODO \r\n\r\n### Resource:\r\n* https://cqrs.files.wordpress.com/2010/11/cqrs_documents.pdf\r\n* https://en.wikipedia.org/wiki/Command%E2%80%93query_separation\r\n* https://github.com/netgloo/spring-boot-samples/blob/master/spring-boot-mysql-springdatajpa-hibernate/src/main/resources/application.properties","google":"UA-68265226-1","note":"Don't delete this file! It's used internally to help with page regeneration."}